@page "/Order/Create"
@inject HttpClient Http
@inject NavigationManager navMgr
<h3>Create</h3>

@if (string.IsNullOrWhiteSpace(ErrorString)==false)
{
    <h4>System Error</h4>
    <p>@ErrorString</p>
}
else
{
    <EditForm Model="@order" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary Model="@order"></ValidationSummary>
        <div class="form-group">
            <label class="control-label">Item to Order</label>
            <select @onchange="FoodItemChange" class="form-control">
                <option value="">Select a Meal...</option>
                @foreach (var f in foodItems)
                {
                    <option value="@f.Id">@f.Title</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label class="control-label">Quantity</label>
            <InputNumber class="form-control" @bind-Value="order.Quantity"></InputNumber>
            <ValidationMessage For="@(()=>order.Quantity)" class="text-danger"></ValidationMessage>
        </div>
        <div class="form-group">
            <label class="control-label">Order Name</label>
            <InputText class="form-control" @bind-Value="order.OrderName" />
            <ValidationMessage For="@(()=>order.OrderName)" class="text-danger"></ValidationMessage>
        </div>
        <div class="form-group">
            <input type="submit" class="btn btn-outline-info" value="Order Food" />
        </div>
    </EditForm>
}

@code {
    private OrderModel order = new OrderModel();
    private List<FoodModel> foodItems = new List<FoodModel>();
    private string ErrorString;
    protected override async Task OnParametersSetAsync()
    {
        HttpResponseMessage response = await Http.GetAsync("Food");
        if (response.IsSuccessStatusCode)
        {
            foodItems = await response.Content.ReadFromJsonAsync<List<FoodModel>>();
        }
        else
        {
            ErrorString = response.ReasonPhrase;
        }
    }

    private async Task HandleValidSubmit()
    {
        order.Total = order.Quantity * foodItems.Where(x => x.Id == order.FoodId).First().Price;
        try
        {
            var response = await Http.PostAsJsonAsync("Order", order);
            var content = await response.Content.ReadFromJsonAsync< OrderCreateResultModel>();
            // order = new OrderModel();
            navMgr.NavigateTo($"Order/Display/{content.Id}");
        }
        catch(Exception ex)
        {
            ErrorString = ex.Message;
        }
    }

    private void FoodItemChange(ChangeEventArgs e)
    {
        if (string.IsNullOrWhiteSpace(e.Value.ToString()) == false)
        {

            order.FoodId = int.Parse(e.Value.ToString());
        }
    }
}
