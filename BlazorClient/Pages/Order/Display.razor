@page "/Order/Display/{Id:int}"
@inject HttpClient Http
@inject NavigationManager navMgr
<h3>Display</h3>

@if (string.IsNullOrWhiteSpace(errorString) == false)
{
    <h4>System Error</h4>
    <p>@errorString</p>
}
else if (orderInfo.Order is null)
{
    <h4>Loading...</h4>
}
else
{
    <table class="table">
        <tbody>
            <tr>
                <td><strong>Order Name</strong></td>
                <td>@orderInfo.Order.OrderName</td>
            </tr>
            <tr>
                <td><strong>Order Date</strong></td>
                <td>@orderInfo.Order.OrderDate</td>
            </tr>
            <tr>
                <td><strong>Order Total</strong></td>
                <td>@string.Format("{0:C}", orderInfo.Order.Total)</td>
            </tr>
            <tr>
                <td><strong>Quantity</strong></td>
                <td>@orderInfo.Order.Quantity</td>
            </tr>
            <tr>
                <td colspan="2">
                    @if (ConfirmDelete)
                    {
                        <button class="btn btn-outline-danger" @onclick="Delete">Coinfirm Delete Order</button>
                        <button class="btn btn-secondary" @onclick="(()=>ConfirmDelete=false)">Cancel Delete Order</button>
                    }
                    else
                    {
                        <button class="btn btn-danger" @onclick="(()=>ConfirmDelete=true)">Delete Order</button>
                    }
                </td>
            </tr>
        </tbody>
    </table>
    <EditForm Model="@upModel" OnValidSubmit="Update">
        <DataAnnotationsValidator />
        <ValidationSummary Model="@upModel" />
        <div class="form-group">
            <label class="control-label">Order Name  </label>
            <InputText @bind-Value="upModel.OrderName" class="form-control"></InputText>
            <ValidationMessage For="@(()=>upModel.OrderName)" class="text-danger"></ValidationMessage>
        </div>
        <div class="form-group">
            <input type="submit" class="btn btn-outline-info" value="Update Order" />
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public int Id { get; set; }
    private OrderResultModel orderInfo = new OrderResultModel();
    private OrderUpdateModel upModel = new OrderUpdateModel();
    private string errorString;
    private bool ConfirmDelete = false;

    protected override async Task OnInitializedAsync()
    {
        HttpResponseMessage response = await Http.GetAsync($"Order/{Id}");
        if (response.IsSuccessStatusCode)
        {
            orderInfo = await response.Content.ReadFromJsonAsync<OrderResultModel>();
            upModel.Id = orderInfo.Order.Id;
            upModel.OrderName = orderInfo.Order.OrderName;
        }
        else
        {
            errorString = response.ReasonPhrase;
        }
    }

    private async Task Update()
    {
        try
        {
            HttpResponseMessage response = await Http.PutAsJsonAsync("Order", upModel);
            orderInfo.Order.OrderName = upModel.OrderName;
        }
        catch (Exception ex)
        {

            errorString = ex.Message;
        }
    }

    private async Task Delete()
    {
        HttpResponseMessage response = await Http.DeleteAsync($"Order/{Id}");
        if(response.IsSuccessStatusCode)
        {
            navMgr.NavigateTo($"Order/Create");
        }
        else
        {
            errorString = response.ReasonPhrase;
        }
    }
}
